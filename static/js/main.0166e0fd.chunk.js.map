{"version":3,"sources":["deepLearning/digitGuesser.ts","Goose.tsx","CanvasBoard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["addMethods","methods","module","exports","w","Worker","name","GooseState","GuessingGoose","props","className","src","gooseState","toString","alt","CanvasBoard","canvasDrawEl","useRef","brushRadius","lazyRadius","hideGrid","canvasWidth","canvasHeight","ref","disabled","hidden","onClick","current","clear","onQueryCallback","getSaveData","AppState","deepWorker","createDigitGuesser","App","useState","DRAWING","appState","setAppState","checkString","setCheckString","canvasInfo","a","THINKING","canvas","document","getElementsByTagName","tf","fromPixels","array","canvasImg","guessDigits","outputDigits","CHECKING","useEffect","APOLOGY","HAPPY","timer","setTimeout","clearTimeout","IDLE","indexOf","maybeRenderCheckingDialog","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0166e0fd.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"guessDigits\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"ad1c35c8973583266b2c.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import React from 'react';\nimport './Goose.css';\n\nexport enum GooseState {\n    IDLE = \"gg-idle-cropped.png\",\n    THINKING = \"gg-investigative-cropped.png\",\n    HAPPY = \"gg-happy-cropped-more.png\",\n}\n\nexport interface GooseProps {\n    gooseState: GooseState\n}\n\nexport function GuessingGoose(props: GooseProps): JSX.Element {\n    return (\n        <figure className=\"gg\">\n            <img className=\"gg\" src={props.gooseState.toString()} alt=\"Guessing Goose is a cutie\"/>\n        </figure>\n    );\n}","import CanvasDraw from \"react-canvas-draw\";\nimport React, {useRef} from \"react\";\nimport \"./CanvasBoard.css\";\n\nexport interface CanvasBoardProps {\n    onQueryCallback: (drawing: string) => void;\n    disabled: boolean;\n    hidden: boolean;\n}\n\n\nexport default function CanvasBoard(props: CanvasBoardProps) {\n    const canvasDrawEl = useRef<CanvasDraw>(null);\n    const clearCanvas = () => {\n        if (canvasDrawEl && canvasDrawEl.current) {\n            canvasDrawEl.current!.clear();\n        }\n    };\n    const submitCanvas = () => {\n        if (canvasDrawEl && canvasDrawEl.current) {\n            props.onQueryCallback(canvasDrawEl.current.getSaveData());\n        }\n    }\n    return (\n        <section>\n            <div className=\"drawing-container\">\n                <CanvasDraw\n                    className=\"drawing-pad\"\n                    brushRadius={4}\n                    lazyRadius={3}\n                    hideGrid={true}\n                    canvasWidth={\"40em\"}\n                    canvasHeight={\"10em\"}\n                    ref={canvasDrawEl}\n                    disabled={props.disabled}\n                />\n            </div>\n            {!props.hidden && (\n                <div className=\"button-choices\">\n                    <button className=\"guess-button btn btn-2 btn-2h\" onClick={clearCanvas} disabled={props.disabled}>clear</button>\n                    <button className=\"guess-button btn btn-2 btn-2h\" onClick={submitCanvas} disabled={props.disabled}>Guess Number</button>\n                </div>\n            )}\n        </section>\n    );\n}\n\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {GooseState, GuessingGoose} from \"./Goose\";\nimport CanvasBoard from \"./CanvasBoard\";\nimport * as tf from \"@tensorflow/tfjs\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport createDigitGuesser from \"workerize-loader!./deepLearning/digitGuesser\";\nimport * as DigitGuesser from \"./deepLearning/digitGuesser\";\n\n\nenum AppState {\n    DRAWING,\n    THINKING,\n    CHECKING,\n    HAPPY,\n    APOLOGY,\n}\n\nconst RESET_DELAY_MS = 3000;\n\n\nconst deepWorker = createDigitGuesser<typeof DigitGuesser>();\n// const deepWorker = DigitGuesser;\n\nfunction App() {\n    const [appState, setAppState] = useState<AppState>(AppState.DRAWING);\n    const [checkString, setCheckString] = useState<string>();\n\n    const getGooseState: () => GooseState = () => {\n        if (appState === AppState.THINKING)\n            return GooseState.THINKING;\n        else if (appState === AppState.HAPPY)\n            return GooseState.HAPPY;\n        return GooseState.IDLE;\n    };\n\n    const onQueryCallback = async (canvasInfo: string) => {\n        setAppState(AppState.THINKING);\n        const canvas = document.getElementsByTagName('canvas')[1] as HTMLCanvasElement;\n        const canvasImg = await tf.browser.fromPixels(canvas, 3).array();\n        const outputDigits = await deepWorker.guessDigits(canvasInfo, canvasImg);\n        setAppState(AppState.CHECKING);\n        setCheckString(outputDigits);\n    };\n\n    useEffect(() => {\n        if (appState === AppState.APOLOGY || appState === AppState.HAPPY) {\n            let timer = setTimeout(() => setAppState(AppState.DRAWING), RESET_DELAY_MS);\n            return () => {\n                clearTimeout(timer);\n            }\n        }\n    }, [appState, setAppState])\n\n    const maybeRenderCheckingDialog = () => {\n        if (appState !== AppState.CHECKING && appState !== AppState.APOLOGY)\n            return;\n        return (\n            <div>\n                <div className=\"check-div\">\n                    {\n                        appState === AppState.CHECKING &&\n                        <span className=\"check\">Is that <span className=\"bold\">\"{checkString}\"</span>?</span>\n                    }\n                    {\n                        appState === AppState.APOLOGY &&\n                        <span className=\"check\">Well, what did you expect? I'm a <span className=\"bold\">Goose</span>...</span>\n                    }\n                </div>\n                { appState === AppState.CHECKING && <div className=\"button-choices\">\n                    <button className=\"guess-button btn btn-2 btn-2h\" onClick={() => setAppState(AppState.APOLOGY)}>No</button>\n                    <button className=\"guess-button btn btn-2 btn-2h\" onClick={() => setAppState(AppState.HAPPY)}>Yes</button>\n                </div> }\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Number Guessing Goose</h1>\n                <h4>By Sara Elzeiny</h4>\n            </header>\n            <GuessingGoose gooseState={getGooseState()}/>\n            <CanvasBoard\n                onQueryCallback={onQueryCallback}\n                disabled={appState === AppState.THINKING}\n                hidden={[AppState.CHECKING, AppState.HAPPY, AppState.APOLOGY].indexOf(appState) >= 0}/>\n            {maybeRenderCheckingDialog()}\n            {/*<canvas id=\"debug\"/>*/}\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}